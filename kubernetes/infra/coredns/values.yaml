# isClusterService specifies whether chart should be deployed as cluster-service or normal k8s app.
isClusterService: false

serviceType: "LoadBalancer"

rbac:
  create: true

# Default zone is what Kubernetes recommends:
# https://kubernetes.io/docs/tasks/administer-cluster/dns-custom-nameservers/#coredns-configmap-options
servers:
  - zones:
      # Set this to "." and enable the forward plugin, if you want the CoreDNS to also work as a recursive DNS
      - zone: blarc.my.id
    port: 53
    # -- expose the service on a different port
    # servicePort: 5353
    # If serviceType is nodePort you can specify nodePort here
    # nodePort: 30053
    # hostPort: 53
    plugins:
      # errors enables error logging.
      - name: errors
      # health enables a health check endpoint on :8080, required for livenessProbe
      - name: health
        configBlock: |-
          lameduck 5s
      # ready enables a readiness check endpoint on :8181, required for readinessProbe
      - name: ready
      # prometheus enables Prometheus metrics on :9153, required for serviceMonitor
      - name: prometheus
        parameters: 0.0.0.0:9153
      # - name: forward
      #   parameters: . 8.8.8.8 1.1.1.1
      - name: cache
        parameters: 30
        # loop detects simple forwarding loops and halts the server.
      - name: loop
        # reload allows automatic reload of a changed Corefile.
      - name: reload
      - name: etcd
        parameters: blarc.my.id
        configBlock: |-
          fallthrough
          stubzones
          path /blarcdns
          endpoint http://etcd-headless.etcd.svc.cluster.local:2379
      # Domain's TLD does not support DNSSEC.
      # - name: dnssec
      #   parameters: blarc.my.id
      #   configBlock: |-
      #    key file /etc/coredns/dnssec/blarc.my.id
      - name: whoami
      - name: log

#extraSecrets:
#  - name: dnssec
#    mountPath: /etc/coredns/dnssec
#    defaultMode: 420
